name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:14-3.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wayshare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: way-share-backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./way-share-backend
      run: npm ci
    
    - name: Run type check
      working-directory: ./way-share-backend
      run: npm run type-check
    
    - name: Run linter
      working-directory: ./way-share-backend
      run: npm run lint || true
    
    - name: Run tests
      working-directory: ./way-share-backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: wayshare_test
        DB_USER: postgres
        DB_PASSWORD: postgres
      run: npm test || true

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: way-share-frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./way-share-frontend
      run: npm ci
    
    - name: Run type check
      working-directory: ./way-share-frontend
      run: npm run type-check || true
    
    - name: Run linter
      working-directory: ./way-share-frontend
      run: npm run lint || true
    
    - name: Run tests
      working-directory: ./way-share-frontend
      run: npm test || true
    
    - name: Build application
      working-directory: ./way-share-frontend
      run: npm run build

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run npm audit - Backend
      working-directory: ./way-share-backend
      run: npm audit --audit-level=high || true
    
    - name: Run npm audit - Frontend
      working-directory: ./way-share-frontend
      run: npm audit --audit-level=high || true

  # Build Docker Images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Backend Docker Image
      uses: docker/build-push-action@v4
      with:
        context: ./way-share-backend
        push: false
        tags: wayshare/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Frontend Docker Image
      uses: docker/build-push-action@v4
      with:
        context: ./way-share-frontend
        push: false
        tags: wayshare/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment scripts here

  # Deploy to Production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add deployment scripts here