name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'  # Updated to Node 20 for Vite 7
  CACHE_VERSION: v1

jobs:
  # Parallel dependency installation with caching
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      backend-cache-key: ${{ steps.backend-cache.outputs.cache-hit }}
      frontend-cache-key: ${{ steps.frontend-cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # Backend caching
      - name: Cache backend dependencies
        id: backend-cache
        uses: actions/cache@v4
        with:
          path: way-share-backend/node_modules
          key: ${{ runner.os }}-backend-${{ env.CACHE_VERSION }}-${{ hashFiles('way-share-backend/package-lock.json') }}
      
      # Frontend caching
      - name: Cache frontend dependencies
        id: frontend-cache
        uses: actions/cache@v4
        with:
          path: way-share-frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ env.CACHE_VERSION }}-${{ hashFiles('way-share-frontend/package-lock.json') }}

  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgis/postgis:14-3.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wayshare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Restore backend cache
        uses: actions/cache@v4
        with:
          path: way-share-backend/node_modules
          key: ${{ runner.os }}-backend-${{ env.CACHE_VERSION }}-${{ hashFiles('way-share-backend/package-lock.json') }}
      
      - name: Install dependencies
        working-directory: ./way-share-backend
        run: npm ci
      
      - name: Run type check
        working-directory: ./way-share-backend
        run: npm run type-check
      
      - name: Run linter
        working-directory: ./way-share-backend
        run: npm run lint
      
      - name: Run tests with coverage
        working-directory: ./way-share-backend
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: wayshare_test
          DB_USER: postgres
          DB_PASSWORD: postgres
        run: npm run test:coverage || npm test
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./way-share-backend/coverage

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Restore frontend cache
        uses: actions/cache@v4
        with:
          path: way-share-frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ env.CACHE_VERSION }}-${{ hashFiles('way-share-frontend/package-lock.json') }}
      
      - name: Install dependencies
        working-directory: ./way-share-frontend
        run: npm ci
      
      - name: Run type check
        working-directory: ./way-share-frontend
        run: npm run type-check
      
      - name: Run linter
        working-directory: ./way-share-frontend
        run: npm run lint
      
      - name: Run tests with coverage
        working-directory: ./way-share-frontend
        run: npm run test:coverage || npm test
      
      - name: Build application
        working-directory: ./way-share-frontend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: way-share-frontend/dist/

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit - Backend
        working-directory: ./way-share-backend
        run: npm audit --audit-level=moderate
      
      - name: Run npm audit - Frontend
        working-directory: ./way-share-frontend
        run: npm audit --audit-level=moderate

  # Build Docker Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: wayshare/app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./way-share-backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./way-share-frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment scripts here

  # Deploy to Production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy Backend
        working-directory: ./way-share-backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway up --service backend
      
      - name: Deploy Frontend
        working-directory: ./way-share-frontend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway up --service frontend
      
      - name: Run Database Migrations
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          railway run --service backend npm run migrate
      
      - name: Health Check
        run: |
          echo "Running health check..."
          # Add health check script here
          
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}